apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: echo
  template:
    metadata:
      labels:
        app: echo
    spec:
      containers:
        - name: echo
          image: ealen/echo-server:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: echo
spec:
  selector:
    app: echo
  ports:
    - name: http
      port: 80
      targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: echo
  annotations:
    kubernetes.io/ingress.class: argon
spec:
  ingressClassName: argon
  rules:
    - host: echo.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: echo
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: echo-paths
  annotations:
    kubernetes.io/ingress.class: argon
spec:
  ingressClassName: argon
  rules:
    - host: echo.local
      http:
        paths:
          - path: /healthz
            pathType: Exact
            backend:
              service:
                name: echo
                port:
                  number: 80
          - path: /api/
            pathType: Prefix
            backend:
              service:
                name: echo
                port:
                  number: 80
          - path: /impl
            pathType: ImplementationSpecific
            backend:
              service:
                name: echo
                port:
                  number: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: echo-tls-nginx
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - echo-tls.local
      secretName: echo-tls
  rules:
    - host: echo-tls.local
      http:
        paths:
          - path: /tls
            pathType: Prefix
            backend:
              service:
                name: echo
                port:
                  number: 80

# 1) generate tls
# openssl req -x509 -nodes -newkey rsa:2048 -days 365 -subj "/CN=echo-tls.local" -addext "subjectAltName=DNS:echo-tls.local" -keyout tls.key -out tls.crt

# 2) create tls in k8s
# kubectl create secret tls echo-tls --cert=tls.crt --key=tls.key
